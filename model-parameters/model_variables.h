/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */

#ifndef _EI_CLASSIFIER_MODEL_VARIABLES_H_
#define _EI_CLASSIFIER_MODEL_VARIABLES_H_

/**
 * @file
 *  Auto-generated complete impulse definitions. The ei_impulse_handle_t should
 *  be passed to ei_run_classifier() function to use this specific impulse.
 *  This file should only be included in ei_run_classifier.h file.
 */

#include <stdint.h>
#include "model_metadata.h"

#include "tflite-model/tflite_learn_777509_7_compiled.h"
#include "edge-impulse-sdk/classifier/ei_model_types.h"
#include "edge-impulse-sdk/classifier/inferencing_engines/engines.h"
#include "edge-impulse-sdk/classifier/postprocessing/ei_postprocessing_common.h"

const char* ei_classifier_inferencing_categories_777509_1[] = { "circle", "left_right", "resting", "up_down" };

EI_CLASSIFIER_DSP_AXES_INDEX_TYPE ei_dsp_config_777509_3_axes[] = { 0, 1, 2 };
const uint32_t ei_dsp_config_777509_3_axes_size = 3;
ei_dsp_config_spectral_analysis_t ei_dsp_config_777509_3 = {
    3, // uint32_t blockId
    1, // int implementationVersion
    3, // int length of axes
    1.0f, // float scale-axes
    1, // int input-decimation-ratio
    "low", // select filter-type
    3.0f, // float filter-cutoff
    6, // int filter-order
    "FFT", // select analysis-type
    128, // int fft-length
    3, // int spectral-peaks-count
    0.1f, // float spectral-peaks-threshold
    "0.1, 0.5, 1.0, 2.0, 5.0", // string spectral-power-edges
    true, // boolean do-log
    true, // boolean do-fft-overlap
    1, // int wavelet-level
    "db4", // select wavelet
    false // boolean extra-low-freq
};

const float ei_dn_standard_scaler_mean_3[33] = { 0.4425312449238939, 1.1184583696915826, 0.1600549095460329, 0.46012718068566877, 0.04733580360287518, 0.19566898727484602, 0.021016344032388397, 0.003784442592742354, 0.00572600788675648, 0.016405885872524225, 0.0020553601400594714, 1.0249556015373107, 0.8732061534697446, 0.4082336877387466, 0.6708344157730436, 0.11673896790864573, 0.773481145293696, 0.07476210580732012, 0.013268945507202472, 0.0809409999287178, 0.11178364305871692, 0.0030589988364278465, 1.3058251710428532, 1.3232792036592975, 0.5296182902964405, 1.1074160025441853, 0.1609658448543706, 0.897568105541114, 0.10570101212920464, 0.014112610800618874, 0.03659272621753006, 0.1906005453730598, 0.014854645955238993 };
const float ei_dn_standard_scaler_scale_3[33] = { 3.61800417861754, 1.1907622964980509, 7.759983097370367, 1.290274042208935, 15.069878640653421, 1.8341598230599985, 21.105151728727265, 203.57376746087996, 162.12521817762908, 44.685445773718534, 306.1701118046382, 1.2761020165131736, 1.45970328186244, 2.7044457322412305, 1.1180771399258074, 8.217212163327261, 0.9400567449700038, 11.337124885720186, 58.18793638326886, 9.666019244495352, 7.26116704281376, 323.7087238611821, 1.067616175123603, 1.420782187725647, 2.323249057541517, 1.031714454371037, 8.620319469441373, 0.9426491000265671, 9.790446822713568, 74.35747922135754, 21.637567996731306, 4.1051930823458225, 34.565656886185366 };
const float ei_dn_standard_scaler_var_3[33] = { 0.07639446112134314, 0.7052609698559263, 0.016606512985606812, 0.6006701903171904, 0.004403322457062968, 0.2972525903325545, 0.0022450346202054325, 0.000024129947218130235, 0.00003804511077160895, 0.0005008040248371639, 0.000010667788933712604, 0.6140860193758008, 0.4693219117775253, 0.13672359132237957, 0.7999382506388063, 0.014809861577156308, 1.1315971898516395, 0.007780260504541089, 0.0002953480374006321, 0.010702979388650558, 0.018966497774648337, 0.000009543137749311998, 0.8773435951187138, 0.4953874413515182, 0.1852714330388688, 0.9394657892791033, 0.013457155717295574, 1.1253817953358638, 0.010432658085324148, 0.00018086339683818966, 0.00213591078500373, 0.05933798892638554, 0.0008369709233708167 };
ei_data_normalization_standard_scaler_config_t ei_data_normalization_standard_scaler_config_3 = {
    .mean_data = (float *)ei_dn_standard_scaler_mean_3,
    .mean_data_len = 33,
    .scale_data = (float *)ei_dn_standard_scaler_scale_3,
    .scale_data_len = 33,
    .var_data = (float *)ei_dn_standard_scaler_var_3,
    .var_data_len = 33
};
ei_data_normalization_t ei_data_normalization_config_3 = {
    (void *) &ei_data_normalization_standard_scaler_config_3, // config
    DATA_NORMALIZATION_METHOD_STANDARD_SCALER, // method
    nullptr, // context
    nullptr, // init func
    nullptr, // deinit func
    &data_normalization_standard_scaler // exec func
};

const uint8_t ei_dsp_blocks_777509_1_size = 1;
ei_model_dsp_t ei_dsp_blocks_777509_1[ei_dsp_blocks_777509_1_size] = {
    { // DSP block 3
        3,
        33, // output size
        &extract_spectral_analysis_features, // DSP function pointer
        (void*)&ei_dsp_config_777509_3, // pointer to config struct
        ei_dsp_config_777509_3_axes, // array of offsets into the input stream, one for each axis
        ei_dsp_config_777509_3_axes_size, // number of axes
        1, // version
        nullptr, // factory function
        &ei_data_normalization_config_3, // data normalization config
    }
};
const ei_config_tflite_eon_graph_t ei_config_graph_777509_7 = {
    .implementation_version = 1,
    .model_init = &tflite_learn_777509_7_init,
    .model_invoke = &tflite_learn_777509_7_invoke,
    .model_reset = &tflite_learn_777509_7_reset,
    .model_input = &tflite_learn_777509_7_input,
    .model_output = &tflite_learn_777509_7_output,
};

const uint8_t ei_output_tensors_indices_777509_7[1] = { 0 };
const uint8_t ei_output_tensors_size_777509_7 = 1;
ei_learning_block_config_tflite_graph_t ei_learning_block_config_777509_7 = {
    .implementation_version = 1,
    .block_id = 7,
    .output_tensors_indices = ei_output_tensors_indices_777509_7,
    .output_tensors_size = ei_output_tensors_size_777509_7,
    .quantized = 1,
    .compiled = 1,
    .graph_config = (void*)&ei_config_graph_777509_7,
    .dequantize_output = 0,
};

const uint8_t ei_learning_blocks_777509_1_size = 1;
const uint32_t ei_learning_block_777509_7_inputs[1] = { 3 };
const uint8_t ei_learning_block_777509_7_inputs_size = 1;
const ei_learning_block_t ei_learning_blocks_777509_1[ei_learning_blocks_777509_1_size] = {
    {
        7,
        &run_nn_inference,
        (void*)&ei_learning_block_config_777509_7,
        EI_CLASSIFIER_IMAGE_SCALING_NONE,
        ei_learning_block_777509_7_inputs,
        ei_learning_block_777509_7_inputs_size,
    },
};

ei_fill_result_classification_i8_config_t ei_fill_result_classification_i8_config_777509_7 = {
    .zero_point = -128,
    .scale = 0.00390625
};

const size_t ei_postprocessing_blocks_777509_1_size = 1;
const ei_postprocessing_block_t ei_postprocessing_blocks_777509_1[ei_postprocessing_blocks_777509_1_size] = {
    {
        .block_id = 7,
        .type = EI_CLASSIFIER_MODE_CLASSIFICATION,
        .init_fn = NULL,
        .deinit_fn = NULL,
        .postprocess_fn = &process_classification_i8,
        .display_fn = NULL,
        .config = (void*)&ei_fill_result_classification_i8_config_777509_7,
        .input_block_id = 7
    },
};

const ei_impulse_t impulse_777509_1 = {
    .project_id = 777509,
    .project_owner = "vsvasconcelos_prof",
    .project_name = "TinyML_Embarcatech",
    .impulse_id = 1,
    .impulse_name = "Time series data, Spectral Analysis, Neural Network (Keras)",
    .deploy_version = 3,

    .nn_input_frame_size = 33,
    .raw_sample_count = 42,
    .raw_samples_per_frame = 3,
    .dsp_input_frame_size = 42 * 3,
    .input_width = 0,
    .input_height = 0,
    .input_frames = 0,
    .interval_ms = 47.61904761904762,
    .frequency = 21,

    .dsp_blocks_size = ei_dsp_blocks_777509_1_size,
    .dsp_blocks = ei_dsp_blocks_777509_1,

    .learning_blocks_size = ei_learning_blocks_777509_1_size,
    .learning_blocks = ei_learning_blocks_777509_1,

    .postprocessing_blocks_size = ei_postprocessing_blocks_777509_1_size,
    .postprocessing_blocks = ei_postprocessing_blocks_777509_1,

    .inferencing_engine = EI_CLASSIFIER_TFLITE,

    .sensor = EI_CLASSIFIER_SENSOR_ACCELEROMETER,
    .fusion_string = "accX + accY + accZ",
    .slice_size = (42/4),
    .slices_per_model_window = 4,

    .has_anomaly = EI_ANOMALY_TYPE_UNKNOWN,
    .label_count = 4,
    .categories = ei_classifier_inferencing_categories_777509_1
};

ei_impulse_handle_t impulse_handle_777509_1 = ei_impulse_handle_t( &impulse_777509_1 );
ei_impulse_handle_t& ei_default_impulse = impulse_handle_777509_1;
constexpr auto& ei_classifier_inferencing_categories = ei_classifier_inferencing_categories_777509_1;
const auto ei_dsp_blocks_size = ei_dsp_blocks_777509_1_size;
ei_model_dsp_t *ei_dsp_blocks = ei_dsp_blocks_777509_1;

#endif // _EI_CLASSIFIER_MODEL_VARIABLES_H_
